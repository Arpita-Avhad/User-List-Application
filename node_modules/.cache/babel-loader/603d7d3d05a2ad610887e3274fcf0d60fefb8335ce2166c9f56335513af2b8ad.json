{"ast":null,"code":"// src/features/users/userSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async ({\n  limit,\n  skip\n}) => {\n  const response = await axios.get('https://dummyjson.com/users', {\n    params: {\n      limit,\n      skip\n    }\n  });\n  return response.data;\n});\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: {\n    data: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Add reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUsers.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload.users; // Assuming API returns data in this shape\n    }).addCase(fetchUsers.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchUsers","limit","skip","response","get","params","data","userSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","users","rejected","message","reducer"],"sources":["C:/Users/DELL/Documents/Arpita_React/user-list-app/src/features/users/userSlice.js"],"sourcesContent":["// src/features/users/userSlice.js\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async ({ limit, skip }) => {\r\n  const response = await axios.get('https://dummyjson.com/users', {\r\n    params: { limit, skip }\r\n  });\r\n  return response.data;\r\n});\r\n\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState: {\r\n    data: [],\r\n    status: 'idle',\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Add reducers if needed\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUsers.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUsers.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.data = action.payload.users; // Assuming API returns data in this shape\r\n      })\r\n      .addCase(fetchUsers.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,kBAAkB,EAAE,OAAO;EAAEG,KAAK;EAAEC;AAAK,CAAC,KAAK;EACxF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,6BAA6B,EAAE;IAC9DC,MAAM,EAAE;MAAEJ,KAAK;MAAEC;IAAK;EACxB,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACG,IAAI;AACtB,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGV,WAAW,CAAC;EAC5BW,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZH,IAAI,EAAE,EAAE;IACRI,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,UAAU,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACf,UAAU,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACX,IAAI,GAAGa,MAAM,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CACDN,OAAO,CAACf,UAAU,CAACsB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACY,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAehB,SAAS,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}