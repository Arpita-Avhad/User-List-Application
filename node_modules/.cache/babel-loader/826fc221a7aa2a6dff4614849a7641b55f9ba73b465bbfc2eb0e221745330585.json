{"ast":null,"code":"// // src/features/users/userSlice.js\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get('https://dummyjson.com/users?limit=100'); // Assuming 100 is more than the total number of records\n//   return response.data.users;\n// });\n\n// const userSlice = createSlice({\n//   name: 'users',\n//   initialState: {\n//     data: [],\n//     status: 'idle',\n//     error: null,\n//   },\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchUsers.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(fetchUsers.fulfilled, (state, action) => {\n//         state.status = 'succeeded';\n//         state.data = action.payload;\n//       })\n//       .addCase(fetchUsers.rejected, (state, action) => {\n//         state.status = 'failed';\n//         state.error = action.error.message;\n//       });\n//   },\n// });\n\n// export default userSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Documents/Arpita_React/user-list-app/src/features/users/userSlice.js"],"sourcesContent":["// // src/features/users/userSlice.js\r\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n//   const response = await axios.get('https://dummyjson.com/users?limit=100'); // Assuming 100 is more than the total number of records\r\n//   return response.data.users;\r\n// });\r\n\r\n// const userSlice = createSlice({\r\n//   name: 'users',\r\n//   initialState: {\r\n//     data: [],\r\n//     status: 'idle',\r\n//     error: null,\r\n//   },\r\n//   reducers: {},\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(fetchUsers.pending, (state) => {\r\n//         state.status = 'loading';\r\n//       })\r\n//       .addCase(fetchUsers.fulfilled, (state, action) => {\r\n//         state.status = 'succeeded';\r\n//         state.data = action.payload;\r\n//       })\r\n//       .addCase(fetchUsers.rejected, (state, action) => {\r\n//         state.status = 'failed';\r\n//         state.error = action.error.message;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// export default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}